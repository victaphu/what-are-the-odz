/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Odz1155 {
  export type ChoiceInfoStruct = {
    choiceId: BigNumberish;
    totalBets: BigNumberish;
  };

  export type ChoiceInfoStructOutput = [choiceId: bigint, totalBets: bigint] & {
    choiceId: bigint;
    totalBets: bigint;
  };

  export type QuestionInfoStruct = {
    questionId: BigNumberish;
    choiceCount: BigNumberish;
    totalBets: BigNumberish;
    attestationCount: BigNumberish;
    result: BigNumberish;
    hasQuorum: boolean;
    choices: Odz1155.ChoiceInfoStruct[];
  };

  export type QuestionInfoStructOutput = [
    questionId: bigint,
    choiceCount: bigint,
    totalBets: bigint,
    attestationCount: bigint,
    result: bigint,
    hasQuorum: boolean,
    choices: Odz1155.ChoiceInfoStructOutput[]
  ] & {
    questionId: bigint;
    choiceCount: bigint;
    totalBets: bigint;
    attestationCount: bigint;
    result: bigint;
    hasQuorum: boolean;
    choices: Odz1155.ChoiceInfoStructOutput[];
  };

  export type ActiveEventInfoStruct = {
    eventId: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    organizer: AddressLike;
    questions: Odz1155.QuestionInfoStruct[];
  };

  export type ActiveEventInfoStructOutput = [
    eventId: bigint,
    startTime: bigint,
    endTime: bigint,
    organizer: string,
    questions: Odz1155.QuestionInfoStructOutput[]
  ] & {
    eventId: bigint;
    startTime: bigint;
    endTime: bigint;
    organizer: string;
    questions: Odz1155.QuestionInfoStructOutput[];
  };
}

export interface Odz1155Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "BET_AMOUNT"
      | "CREATOR_FEE"
      | "JOIN_REWARD"
      | "ODDS_PRECISION"
      | "PROPOSE_COST"
      | "QUORUM_PERCENTAGE"
      | "STAKE_AMOUNT"
      | "_eventIds"
      | "_odzCoin"
      | "balanceOf"
      | "balanceOfBatch"
      | "burn"
      | "burnBatch"
      | "claimAllOdz"
      | "concludeEvent"
      | "createEvent"
      | "didReceiveAttestation(address,uint64,uint64,bytes)"
      | "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)"
      | "didReceiveRevocation(address,uint64,uint64,bytes)"
      | "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)"
      | "eventSchemaId"
      | "events"
      | "getEventDetails"
      | "getEvents"
      | "getOdds"
      | "getPotentialPayout"
      | "isApprovedForAll"
      | "joinEvent"
      | "owner"
      | "placeBet"
      | "proposeQuestion"
      | "renounceOwnership"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setEventSchemaId"
      | "setOdzCoin"
      | "supportsInterface"
      | "transferOwnership"
      | "unclaimedOdz"
      | "uri"
      | "userStakes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "AttestationReceived"
      | "OwnershipTransferred"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BET_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATOR_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "JOIN_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ODDS_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSE_COST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUORUM_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_eventIds", values?: undefined): string;
  encodeFunctionData(functionFragment: "_odzCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllOdz",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "concludeEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,bytes)",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,bytes)",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eventSchemaId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getEvents", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOdds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPotentialPayout",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeQuestion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventSchemaId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOdzCoin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedOdz",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "userStakes",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BET_AMOUNT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CREATOR_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "JOIN_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ODDS_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSE_COST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUORUM_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_eventIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_odzCoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAllOdz",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "concludeEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventSchemaId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEvents", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOdds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPotentialPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinEvent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventSchemaId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOdzCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedOdz",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AttestationReceivedEvent {
  export type InputTuple = [
    attester: AddressLike,
    eventId: BigNumberish,
    questionId: BigNumberish,
    choiceId: BigNumberish
  ];
  export type OutputTuple = [
    attester: string,
    eventId: bigint,
    questionId: bigint,
    choiceId: bigint
  ];
  export interface OutputObject {
    attester: string;
    eventId: bigint;
    questionId: bigint;
    choiceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Odz1155 extends BaseContract {
  connect(runner?: ContractRunner | null): Odz1155;
  waitForDeployment(): Promise<this>;

  interface: Odz1155Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BET_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  CREATOR_FEE: TypedContractMethod<[], [bigint], "view">;

  JOIN_REWARD: TypedContractMethod<[], [bigint], "view">;

  ODDS_PRECISION: TypedContractMethod<[], [bigint], "view">;

  PROPOSE_COST: TypedContractMethod<[], [bigint], "view">;

  QUORUM_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  STAKE_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  _eventIds: TypedContractMethod<[], [bigint], "view">;

  _odzCoin: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  burn: TypedContractMethod<
    [account: AddressLike, id: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  burnBatch: TypedContractMethod<
    [account: AddressLike, ids: BigNumberish[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claimAllOdz: TypedContractMethod<[], [void], "nonpayable">;

  concludeEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createEvent: TypedContractMethod<
    [_startTime: BigNumberish, _endTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  "didReceiveAttestation(address,uint64,uint64,bytes)": TypedContractMethod<
    [
      attester: AddressLike,
      schemaId: BigNumberish,
      attestationId: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "payable"
  >;

  "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)": TypedContractMethod<
    [
      attester: AddressLike,
      schemaId: BigNumberish,
      attestationId: BigNumberish,
      resolverFeeERC20Token: AddressLike,
      resolverFeeERC20Amount: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "didReceiveRevocation(address,uint64,uint64,bytes)": TypedContractMethod<
    [
      attester: AddressLike,
      schemaId: BigNumberish,
      attestationId: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "payable"
  >;

  "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)": TypedContractMethod<
    [
      attester: AddressLike,
      schemaId: BigNumberish,
      attestationId: BigNumberish,
      resolverFeeERC20Token: AddressLike,
      resolverFeeERC20Amount: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  eventSchemaId: TypedContractMethod<[], [bigint], "view">;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string, boolean] & {
        startTime: bigint;
        endTime: bigint;
        participantCount: bigint;
        questionCount: bigint;
        organizer: string;
        concluded: boolean;
      }
    ],
    "view"
  >;

  getEventDetails: TypedContractMethod<
    [_eventId: BigNumberish],
    [Odz1155.ActiveEventInfoStructOutput],
    "view"
  >;

  getEvents: TypedContractMethod<
    [],
    [Odz1155.ActiveEventInfoStructOutput[]],
    "view"
  >;

  getOdds: TypedContractMethod<
    [
      _eventId: BigNumberish,
      _questionId: BigNumberish,
      _choiceId: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getPotentialPayout: TypedContractMethod<
    [
      _eventId: BigNumberish,
      _questionId: BigNumberish,
      _choiceId: BigNumberish
    ],
    [bigint],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  joinEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  placeBet: TypedContractMethod<
    [
      _eventId: BigNumberish,
      _questionId: BigNumberish,
      _choiceId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  proposeQuestion: TypedContractMethod<
    [_eventId: BigNumberish, _choiceCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setEventSchemaId: TypedContractMethod<
    [_schemaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOdzCoin: TypedContractMethod<[odzCoin: AddressLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unclaimedOdz: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  uri: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  userStakes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BET_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CREATOR_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "JOIN_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ODDS_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROPOSE_COST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUORUM_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STAKE_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_eventIds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_odzCoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnBatch"
  ): TypedContractMethod<
    [account: AddressLike, ids: BigNumberish[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimAllOdz"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "concludeEvent"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [_startTime: BigNumberish, _endTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "didReceiveAttestation(address,uint64,uint64,bytes)"
  ): TypedContractMethod<
    [
      attester: AddressLike,
      schemaId: BigNumberish,
      attestationId: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      attester: AddressLike,
      schemaId: BigNumberish,
      attestationId: BigNumberish,
      resolverFeeERC20Token: AddressLike,
      resolverFeeERC20Amount: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "didReceiveRevocation(address,uint64,uint64,bytes)"
  ): TypedContractMethod<
    [
      attester: AddressLike,
      schemaId: BigNumberish,
      attestationId: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      attester: AddressLike,
      schemaId: BigNumberish,
      attestationId: BigNumberish,
      resolverFeeERC20Token: AddressLike,
      resolverFeeERC20Amount: BigNumberish,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eventSchemaId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string, boolean] & {
        startTime: bigint;
        endTime: bigint;
        participantCount: bigint;
        questionCount: bigint;
        organizer: string;
        concluded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEventDetails"
  ): TypedContractMethod<
    [_eventId: BigNumberish],
    [Odz1155.ActiveEventInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEvents"
  ): TypedContractMethod<[], [Odz1155.ActiveEventInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getOdds"
  ): TypedContractMethod<
    [
      _eventId: BigNumberish,
      _questionId: BigNumberish,
      _choiceId: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPotentialPayout"
  ): TypedContractMethod<
    [
      _eventId: BigNumberish,
      _questionId: BigNumberish,
      _choiceId: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinEvent"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<
    [
      _eventId: BigNumberish,
      _questionId: BigNumberish,
      _choiceId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeQuestion"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _choiceCount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEventSchemaId"
  ): TypedContractMethod<[_schemaId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOdzCoin"
  ): TypedContractMethod<[odzCoin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unclaimedOdz"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "userStakes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "AttestationReceived"
  ): TypedContractEvent<
    AttestationReceivedEvent.InputTuple,
    AttestationReceivedEvent.OutputTuple,
    AttestationReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "AttestationReceived(address,uint256,uint256,uint256)": TypedContractEvent<
      AttestationReceivedEvent.InputTuple,
      AttestationReceivedEvent.OutputTuple,
      AttestationReceivedEvent.OutputObject
    >;
    AttestationReceived: TypedContractEvent<
      AttestationReceivedEvent.InputTuple,
      AttestationReceivedEvent.OutputTuple,
      AttestationReceivedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
  };
}
